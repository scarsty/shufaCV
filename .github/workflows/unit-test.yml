# GH actions

name: unittest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        image: [ 'windows-latest', 'ubuntu-latest', 'macos-latest' ]
        include:
        - image: windows-latest
          cmake: -Dgtest_force_shared_crt=ON -G "Visual Studio 16 2019" -A x64
          build: -G "Visual Studio 16 2019" -A x64
        - image: ubuntu-latest
          cmake: -G Ninja
          build: -G Ninja
        - image: macos-latest
          cmake: -G Ninja
          build: -G Ninja
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
      
      - name: cache-googletest
        id: cache-googletest
        uses: actions/cache@v2.1.6
        with:
          path: googletest-install-${{ matrix.image }}
          key: cache-googletest-${{ matrix.image }}
        
      - name: Install googletest
        shell: bash
        if: steps.cache-googletest.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/google/googletest --depth 1
          cd googletest
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_INSTALL_PREFIX='${{ github.workspace }}'/googletest-install-${{ matrix.image }} ${{ matrix.cmake }}
          cmake --build . --config ${{ env.BUILD_TYPE }} -j 2
          cmake --install . --config ${{ env.BUILD_TYPE }}

      - name: Configure with CMake
        shell: bash
        run: |
          mkdir build
          cd build
          cmake ${{ matrix.build }} .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DSHUFACV_TEST=ON -DGTest_DIR='${{ github.workspace }}'/googletest-install-${{ matrix.image }}/lib/cmake/GTest
      - name: Building
        run: cmake --build build --config ${{ env.BUILD_TYPE }}
      - name: Testing
        working-directory: ${{ github.workspace }}/build
        run: ctest -C ${{ env.BUILD_TYPE }} --output-on-failure
